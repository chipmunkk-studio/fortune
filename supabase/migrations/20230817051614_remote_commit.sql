
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

ALTER SCHEMA "public" OWNER TO "postgres";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE "public"."alarm_feeds" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "headings" "text" DEFAULT ''::"text" NOT NULL,
    "content" "text" DEFAULT ''::"text" NOT NULL,
    "id" bigint NOT NULL,
    "users" bigint,
    "type" "text" NOT NULL,
    "is_read" boolean DEFAULT false NOT NULL,
    "alarm_reward_history" bigint
);

ALTER TABLE "public"."alarm_feeds" OWNER TO "postgres";

ALTER TABLE "public"."alarm_feeds" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notice_user_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."alarm_feed_type" (
    "type" "text" DEFAULT 'push'::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text"
);

ALTER TABLE "public"."alarm_feed_type" OWNER TO "postgres";

CREATE TABLE "public"."alarm_reward_history" (
    "id" bigint NOT NULL,
    "alarm_reward_info" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "users" bigint NOT NULL,
    "is_receive" boolean DEFAULT false NOT NULL,
    "ingredients" bigint NOT NULL
);

ALTER TABLE "public"."alarm_reward_history" OWNER TO "postgres";

CREATE TABLE "public"."alarm_reward_info" (
    "id" bigint NOT NULL,
    "type" "text" NOT NULL,
    "has_unique_marker" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."alarm_reward_info" OWNER TO "postgres";

CREATE TABLE "public"."alarm_reward_type" (
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "public"."alarm_reward_type" OWNER TO "postgres";

CREATE TABLE "public"."mission_clear_conditions" (
    "id" bigint NOT NULL,
    "missions" bigint NOT NULL,
    "require_count" bigint DEFAULT '0'::bigint NOT NULL,
    "ingredients" bigint
);

ALTER TABLE "public"."mission_clear_conditions" OWNER TO "postgres";

ALTER TABLE "public"."mission_clear_conditions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."clear_codition_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."alarm_reward_history" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."event_reward_history_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."ingredient_image" (
    "image_url" "text" NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."ingredient_image" OWNER TO "postgres";

CREATE TABLE "public"."ingredient_type" (
    "name" "text" DEFAULT 'normal'::"text" NOT NULL,
    "description" "text"
);

ALTER TABLE "public"."ingredient_type" OWNER TO "postgres";

CREATE TABLE "public"."ingredients" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "reward_ticket" bigint DEFAULT '0'::bigint NOT NULL,
    "distance" bigint DEFAULT '200'::bigint NOT NULL,
    "type" "text" DEFAULT 'normal'::"text" NOT NULL,
    "image_url" "text"
);

ALTER TABLE "public"."ingredients" OWNER TO "postgres";

CREATE TABLE "public"."obtain_histories" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "location_name" "text",
    "ingredient" bigint NOT NULL,
    "user" bigint NOT NULL,
    "marker_id" "text",
    "ingredient_name" "text" DEFAULT ''::"text" NOT NULL,
    "nickname" "text" DEFAULT ''::"text" NOT NULL,
    "is_reward" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."obtain_histories" OWNER TO "postgres";

ALTER TABLE "public"."obtain_histories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."marker_obtain_history_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."markers" (
    "id" bigint NOT NULL,
    "ingredients" bigint,
    "longitude" double precision NOT NULL,
    "last_obtain_user" bigint,
    "latitude" double precision NOT NULL,
    "hit_count" bigint DEFAULT '0'::bigint NOT NULL,
    "is_reward" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."markers" OWNER TO "postgres";

ALTER TABLE "public"."ingredients" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."markers_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."markers" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."markers_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."mission_clear_user" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "missions" bigint NOT NULL,
    "users" bigint NOT NULL,
    "is_receive" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."mission_clear_user" OWNER TO "postgres";

ALTER TABLE "public"."mission_clear_user" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."mission_clear_user_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."mission_reward" (
    "id" bigint NOT NULL,
    "total_count" bigint DEFAULT '0'::bigint NOT NULL,
    "remain_count" bigint DEFAULT '0'::bigint NOT NULL,
    "reward_image" "text" DEFAULT 'https://via.placeholder.com/1x1.png?text=+&bg=ffffff00'::"text",
    "created_at" timestamp with time zone DEFAULT "now"(),
    "reward_name" "text" DEFAULT ''::"text"
);

ALTER TABLE "public"."mission_reward" OWNER TO "postgres";

ALTER TABLE "public"."mission_reward" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."mission_reward_s_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."mission_reward_type" (
    "name" "text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "public"."mission_reward_type" OWNER TO "postgres";

CREATE TABLE "public"."mission_type" (
    "name" "text" DEFAULT 'normal'::"text" NOT NULL,
    "description" "text"
);

ALTER TABLE "public"."mission_type" OWNER TO "postgres";

CREATE TABLE "public"."missions" (
    "id" bigint NOT NULL,
    "title" "text" DEFAULT ''::"text" NOT NULL,
    "content" "text" DEFAULT ''::"text" NOT NULL,
    "is_global" boolean DEFAULT false NOT NULL,
    "is_active" boolean DEFAULT false NOT NULL,
    "mission_type" "text" NOT NULL,
    "mission_reward" bigint,
    "markers" bigint
);

ALTER TABLE "public"."missions" OWNER TO "postgres";

ALTER TABLE "public"."missions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."missions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."push_alarm" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "headings" "text" DEFAULT ''::"text" NOT NULL,
    "content" "text" DEFAULT ''::"text" NOT NULL,
    "id" bigint NOT NULL,
    "landing_route" "text" DEFAULT 'obtainHistory'::"text" NOT NULL,
    "search_text" "text" DEFAULT ''::"text"
);

ALTER TABLE "public"."push_alarm" OWNER TO "postgres";

ALTER TABLE "public"."push_alarm" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."push_alaram_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."alarm_reward_info" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."reward_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."terms" (
    "id" bigint NOT NULL,
    "index" bigint NOT NULL,
    "is_require" boolean DEFAULT true NOT NULL,
    "title" "text",
    "content" "text"
);

ALTER TABLE "public"."terms" OWNER TO "postgres";

ALTER TABLE "public"."terms" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."terms_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."users" (
    "id" bigint NOT NULL,
    "phone" "text" NOT NULL,
    "nickname" "text" NOT NULL,
    "ticket" bigint DEFAULT '0'::bigint NOT NULL,
    "profileImage" "text" DEFAULT ''::"text",
    "marker_obtain_count" bigint DEFAULT '0'::bigint NOT NULL,
    "level" bigint DEFAULT '1'::bigint NOT NULL
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE "public"."users" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."alarm_feeds"
    ADD CONSTRAINT "notice_user_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."terms"
    ADD CONSTRAINT "agree_terms_index_key" UNIQUE ("index");

ALTER TABLE ONLY "public"."terms"
    ADD CONSTRAINT "agree_terms_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."mission_clear_conditions"
    ADD CONSTRAINT "clear_codition_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."alarm_feed_type"
    ADD CONSTRAINT "event_notice_type_pkey" PRIMARY KEY ("type");

ALTER TABLE ONLY "public"."alarm_reward_history"
    ADD CONSTRAINT "event_reward_history_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ingredient_image"
    ADD CONSTRAINT "ingredient_image_imageUrl_key" UNIQUE ("image_url");

ALTER TABLE ONLY "public"."ingredient_image"
    ADD CONSTRAINT "ingredient_image_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."ingredient_image"
    ADD CONSTRAINT "ingredient_image_pkey" PRIMARY KEY ("image_url");

ALTER TABLE ONLY "public"."ingredient_type"
    ADD CONSTRAINT "ingredient_type_pkey" PRIMARY KEY ("name");

ALTER TABLE ONLY "public"."obtain_histories"
    ADD CONSTRAINT "marker_obtain_history_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "markers_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."markers"
    ADD CONSTRAINT "markers_pkey1" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."mission_clear_user"
    ADD CONSTRAINT "mission_clear_user_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."mission_reward"
    ADD CONSTRAINT "mission_reward_s_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."mission_reward_type"
    ADD CONSTRAINT "mission_reward_type_pkey" PRIMARY KEY ("name");

ALTER TABLE ONLY "public"."mission_type"
    ADD CONSTRAINT "mission_type_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."mission_type"
    ADD CONSTRAINT "mission_type_pkey" PRIMARY KEY ("name");

ALTER TABLE ONLY "public"."missions"
    ADD CONSTRAINT "missions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."missions"
    ADD CONSTRAINT "missions_title_key" UNIQUE ("title");

ALTER TABLE ONLY "public"."push_alarm"
    ADD CONSTRAINT "push_alaram_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."alarm_reward_info"
    ADD CONSTRAINT "reward_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."alarm_reward_type"
    ADD CONSTRAINT "reward_type_pkey" PRIMARY KEY ("name");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "user_nickname_key" UNIQUE ("nickname");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "user_phone_key" UNIQUE ("phone");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

CREATE TRIGGER "push_alarm" AFTER INSERT ON "public"."push_alarm" FOR EACH ROW EXECUTE FUNCTION "supabase_functions"."http_request"('https://xmufibipxesmoqzqwwwp.functions.supabase.co/push_notices', 'POST', '{"Content-type":"application/json"}', '{}', '1000');

ALTER TABLE ONLY "public"."alarm_feeds"
    ADD CONSTRAINT "alarm_feeds_alarm_reward_history_fkey" FOREIGN KEY ("alarm_reward_history") REFERENCES "public"."alarm_reward_history"("id");

ALTER TABLE ONLY "public"."alarm_feeds"
    ADD CONSTRAINT "alarm_feeds_type_fkey" FOREIGN KEY ("type") REFERENCES "public"."alarm_feed_type"("type");

ALTER TABLE ONLY "public"."alarm_reward_history"
    ADD CONSTRAINT "alarm_reward_history_alarm_reward_info_fkey" FOREIGN KEY ("alarm_reward_info") REFERENCES "public"."alarm_reward_info"("id");

ALTER TABLE ONLY "public"."alarm_reward_history"
    ADD CONSTRAINT "alarm_reward_history_ingredients_fkey" FOREIGN KEY ("ingredients") REFERENCES "public"."ingredients"("id");

ALTER TABLE ONLY "public"."alarm_reward_history"
    ADD CONSTRAINT "alarm_reward_history_users_fkey" FOREIGN KEY ("users") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."alarm_reward_info"
    ADD CONSTRAINT "alarm_reward_info_type_fkey" FOREIGN KEY ("type") REFERENCES "public"."alarm_reward_type"("name");

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "ingredients_image_url_fkey" FOREIGN KEY ("image_url") REFERENCES "public"."ingredient_image"("image_url") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "ingredients_type_fkey" FOREIGN KEY ("type") REFERENCES "public"."ingredient_type"("name") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."markers"
    ADD CONSTRAINT "markers_ingredients_fkey" FOREIGN KEY ("ingredients") REFERENCES "public"."ingredients"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."markers"
    ADD CONSTRAINT "markers_last_obtain_user_fkey" FOREIGN KEY ("last_obtain_user") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."mission_clear_conditions"
    ADD CONSTRAINT "mission_clear_conditions_ingredients_fkey" FOREIGN KEY ("ingredients") REFERENCES "public"."ingredients"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."mission_clear_conditions"
    ADD CONSTRAINT "mission_clear_conditions_missions_fkey" FOREIGN KEY ("missions") REFERENCES "public"."missions"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."mission_clear_user"
    ADD CONSTRAINT "mission_clear_user_missions_fkey" FOREIGN KEY ("missions") REFERENCES "public"."missions"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."mission_clear_user"
    ADD CONSTRAINT "mission_clear_user_users_fkey" FOREIGN KEY ("users") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."missions"
    ADD CONSTRAINT "missions_markers_fkey" FOREIGN KEY ("markers") REFERENCES "public"."markers"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."missions"
    ADD CONSTRAINT "missions_mission_reward_fkey" FOREIGN KEY ("mission_reward") REFERENCES "public"."mission_reward"("id");

ALTER TABLE ONLY "public"."missions"
    ADD CONSTRAINT "missions_mission_type_fkey" FOREIGN KEY ("mission_type") REFERENCES "public"."mission_type"("name");

ALTER TABLE ONLY "public"."obtain_histories"
    ADD CONSTRAINT "obtain_histories_ingredient_fkey" FOREIGN KEY ("ingredient") REFERENCES "public"."ingredients"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."obtain_histories"
    ADD CONSTRAINT "obtain_histories_user_fkey" FOREIGN KEY ("user") REFERENCES "public"."users"("id") ON DELETE CASCADE;

CREATE POLICY "인증받은 유저들만 삽입 가능." ON "public"."obtain_histories" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "인증받은 유저들만 업데이트." ON "public"."markers" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "인증받은 유저들만 읽기 가능." ON "public"."obtain_histories" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable delete for users based on user_id" ON "public"."alarm_feeds" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."alarm_feeds" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."alarm_reward_history" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."mission_clear_user" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."alarm_feeds" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."alarm_reward_history" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."alarm_reward_info" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."mission_clear_conditions" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."mission_clear_user" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."mission_reward" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."mission_reward_type" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."mission_type" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."missions" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."obtain_histories" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable update for users based on email" ON "public"."alarm_feeds" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."alarm_reward_history" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."mission_clear_conditions" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."mission_clear_user" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."mission_reward" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."missions" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."users" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

ALTER TABLE "public"."alarm_feed_type" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."alarm_feeds" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."alarm_reward_history" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."alarm_reward_info" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."alarm_reward_type" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ingredient_image" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ingredient_type" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ingredients" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."markers" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."mission_clear_conditions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."mission_clear_user" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."mission_reward" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."mission_reward_type" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."mission_type" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."missions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."obtain_histories" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."push_alarm" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."terms" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "앱을 사용하는 모든 유저는 읽을 수 있음." ON "public"."terms" FOR SELECT TO "anon" USING (true);

CREATE POLICY "앱의 키를 갖고 있거나 인증받은 사용자라면 조" ON "public"."users" FOR SELECT TO "anon", "authenticated" USING (true);

CREATE POLICY "인증되지 않은 사용자라도 가입되게 함." ON "public"."users" FOR INSERT TO "anon" WITH CHECK (true);

CREATE POLICY "인증받은 유저들만 insert" ON "public"."markers" FOR INSERT TO "anon", "authenticated" WITH CHECK (true);

CREATE POLICY "인증받은 유저들만 삭제." ON "public"."markers" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "인증받은 유저들만 조회 가능." ON "public"."ingredients" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "인증받은 유저들만 추가 가능." ON "public"."ingredients" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "인증받은 유저만 읽기 가능. " ON "public"."markers" FOR SELECT TO "authenticated" USING (true);

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;

RESET ALL;
