create table "public"."post" (
    "id" bigint generated by default as identity not null,
    "users" bigint not null,
    "content" jsonb not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."post" enable row level security;

alter table "public"."app_update" add column "is_alert" boolean not null default false;

CREATE UNIQUE INDEX post_pkey ON public.post USING btree (id);

alter table "public"."post" add constraint "post_pkey" PRIMARY KEY using index "post_pkey";

alter table "public"."post" add constraint "post_users_fkey" FOREIGN KEY (users) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."post" validate constraint "post_users_fkey";

create policy "Enable delete for users based on user_id"
on "public"."post"
as permissive
for delete
to authenticated
using (((auth.jwt() ->> 'email'::text) = ( SELECT users.email
   FROM users
  WHERE (users.id = post.users))));


create policy "Enable insert for authenticated users only"
on "public"."post"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."post"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for users based on email"
on "public"."post"
as permissive
for update
to authenticated
using (((auth.jwt() ->> 'email'::text) = ( SELECT users.email
   FROM users
  WHERE (users.id = post.users))))
with check (((auth.jwt() ->> 'email'::text) = ( SELECT users.email
   FROM users
  WHERE (users.id = post.users))));



