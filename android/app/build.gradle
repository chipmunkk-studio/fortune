def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterNdkVersion = localProperties.getProperty('fluuter.ndkVersion')
if (flutterNdkVersion == null) {
    flutterNdkVersion = '25.1.8937393'
}
def flutterCompileSdkVersion = localProperties.getProperty('flutter.flutterCompileSdkVersion')
if (flutterCompileSdkVersion == null) {
    flutterCompileSdkVersion = '33'
}

def flutterMinSdkVersion = localProperties.getProperty('flutter.flutterMinSdkVersion')
if (flutterMinSdkVersion == null) {
    flutterMinSdkVersion = '24'
}

def flutterTargetSdkVersion = localProperties.getProperty('flutter.flutterTargetSdkVersion')
if (flutterTargetSdkVersion == null) {
    flutterTargetSdkVersion = '33'
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def getBranchName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        println "Git Current Branch = " + stdout.toString()
        return stdout.toString().trim()
    }
    catch (Exception e) {
        println "Exception = " + e.getMessage()
        return null;
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
// This must appear at the bottom of the file
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion flutterCompileSdkVersion.toInteger()
    ndkVersion flutterNdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        release {
            // 키스토어에서 없으면 깃허브에서 찾음.
            storePassword keystoreProperties['storePassword'] ?: System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyPassword keystoreProperties['keyPassword'] ?: System.getenv("ANDROID_KEY_PASSWORD")
            keyAlias keystoreProperties['keyAlias'] ?: System.getenv("ANDROID_KEY_ALIAS")
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : file('product.jks')
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.foresh.fortune"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion flutterMinSdkVersion.toInteger()
        targetSdkVersion flutterTargetSdkVersion.toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            ndk {
                abiFilters "armeabi", "x86", "armeabi-v7a", "x86_64", "mips",
                        "mips64", "arm64-v8a"
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def appId = variant.applicationId
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def flavorName = variant.flavorName // e. g. free
            def buildType = variant.buildType.name // e. g. debug
            def variantName = variant.name // e. g. freeDebug
            def date = new Date();
            def formattedDate = date.format('yyyyMMdd_HHmm')
            def apkName = formattedDate + '_' + appId + '_' + versionName + '_' + versionCode + '_' + buildType + '.apk';
            output.outputFileName = apkName
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.gms:play-services-ads:22.5.0'
    implementation 'com.google.ads.mediation:facebook:6.16.0.0'
    implementation "com.google.ads.mediation:applovin:11.11.3.0"
    implementation 'com.google.ads.mediation:chartboost:9.5.0.0'
}
