  FutureOr<void> nextPage(FaqNextPage event, Emitter<FaqState> emit) async {
    if (!state.isNextPageLoading) {
      final nextPage = state.page + 1;
      emit(
        state.copyWith(
          items: [...state.items, FaqContentNextPageLoading()],
          isNextPageLoading: true,
        ),
      );
      produceSideEffect(FaqEndScroll());
      await obtainFaqUseCase(nextPage).then(
        (value) => value.fold(
          (l) => produceSideEffect(FaqError(l)),
          (r) {
            final filteredItems = state.items.where((item) => item is! FaqContentNextPageLoading).toList();
            emit(
              state.copyWith(
                items: List.of(filteredItems)..addAll(r.faqs),
                page: () {
                  // 다음 페이지가 비어 있으면 현재 페이지 넘버를 유지.
                  if (r.faqs.isEmpty) {
                    return state.page;
                  } else {
                    return nextPage;
                  }
                }(),
                isLoading: false,
                isNextPageLoading: false,
              ),
            );
          },
        ),
      );
    }
  }


    // 재료 아이디들만 뽑음.
      final ingredientIds = markersNearByMe.map((e) => e.ingredientId).toList();
      // 재료 리스트.
      final ingredientsList = await ingredientRepository.getIngredientByIds(ingredientIds);
      // 마커 목록을 뽑아옴.
      final List<MarkerMapEntity> markerEntities = markersNearByMe.map(
        (e) {
          final matchedElement = ingredientsList.where((element) => element.id == e.ingredientId).single;
          return MarkerMapEntity(
            id: e.id,
            ingredient: matchedElement,
            latitude: e.latitude,
            longitude: e.longitude,
            isExtinct: e.isExtinct,
            isRandomLocation: e.isRandomLocation,
            lastObtainUser: e.lastObtainUser,
          );
        },
      ).toList();







  import 'package:flutter/material.dart';
  import 'package:flutter/rendering.dart';
  import 'package:flutter_bloc/flutter_bloc.dart';
  import 'package:flutter_screenutil/flutter_screenutil.dart';
  import 'package:fortune/core/error/fortune_error_dialog.dart';
  import 'package:fortune/core/util/date.dart';
  import 'package:fortune/core/util/logger.dart';
  import 'package:fortune/core/widgets/fortune_scaffold.dart';
  import 'package:fortune/di.dart';
  import 'package:fortune/domain/entities/common/faq_entity.dart';
  import 'package:fortune/presentation/fortune_router.dart';
  import 'package:fortune/presentation/support/faq/bloc/faq.dart';
  import 'package:side_effect_bloc/side_effect_bloc.dart';

  import '../component/support_card.dart';

  class FaqPage extends StatelessWidget {
    const FaqPage({Key? key}) : super(key: key);

    @override
    Widget build(BuildContext context) {
      return BlocProvider(
        create: (context) => serviceLocator<FaqBloc>()..add(FaqInit()),
        child: FortuneScaffold(
          appBar: FortuneCustomAppBar.leadingAppBar(context, title: "자주 묻는 질문"),
          child: const _FaqPage(),
        ),
      );
    }
  }

  class _FaqPage extends StatefulWidget {
    const _FaqPage({Key? key}) : super(key: key);

    @override
    State<_FaqPage> createState() => _FaqPageState();
  }

  class _FaqPageState extends State<_FaqPage> {
    late final FaqBloc _bloc;
    final router = serviceLocator<FortuneRouter>().router;
    final _scrollController = ScrollController();

    @override
    void initState() {
      super.initState();
      _bloc = BlocProvider.of<FaqBloc>(context);
      _bloc.stream.listen(
        (event) async {
          if (event.isNextPageLoading) {
            await Future.delayed(Duration(milliseconds: 1000));
            _bloc.add(FaqNextPageGetContent());
            FortuneLogger.info(tag: "PagingTest", "#3 FaqNextPageGetContent");
          }
        },
      );
      _scrollController.addListener(_onScroll);
    }

    @override
    void dispose() {
      super.dispose();
      _bloc.close();
    }

    @override
    Widget build(BuildContext context) {
      return BlocSideEffectListener<FaqBloc, FaqSideEffect>(
        listener: (context, sideEffect) {
          if (sideEffect is FaqError) {
            context.handleError(sideEffect.error);
          }
        },
        child: BlocBuilder<FaqBloc, FaqState>(
          builder: (context, state) {
            return ListView.separated(
              controller: _scrollController,
              physics: const BouncingScrollPhysics(),
              itemCount: state.items.length,
              separatorBuilder: (context, index) => SizedBox(height: 20.h),
              itemBuilder: (context, index) {
                final item = state.items[index];
                if (item is FaqContentEntity) {
                  return SupportCard(
                    title: item.title,
                    content: item.content,
                    date: FortuneDateExtension.formattedDate(item.createdAt),
                  );
                } else {
                  FortuneLogger.info(tag: "PagingTest", "#2 CircularProgressIndicator");
                  return Center(child: CircularProgressIndicator());
                }
              },
            );
          },
        ),
      );
    }

    void _onScroll() {
      final maxScroll = _scrollController.position.maxScrollExtent;
      final currentScroll = _scrollController.position.pixels;
      const tolerance = 1.0; // You can adjust this value
      if (currentScroll == maxScroll &&
          _scrollController.position.userScrollDirection == ScrollDirection.reverse &&
          !_bloc.state.isNextPageLoading) {
        FortuneLogger.info(tag: "PagingTest", "#0 _onScroll");
        _bloc.add(FaqNextPageLoading());
      }
    }
  }














import 'dart:async';

import 'package:bloc_concurrency/bloc_concurrency.dart';
import 'package:bloc_event_transformers/bloc_event_transformers.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fortune/core/util/logger.dart';
import 'package:fortune/domain/entities/common/faq_entity.dart';
import 'package:fortune/domain/usecases/obtain_faq_usecaase.dart';
import 'package:side_effect_bloc/side_effect_bloc.dart';

import 'faq.dart';

class FaqBloc extends Bloc<FaqEvent, FaqState> with SideEffectBlocMixin<FaqEvent, FaqState, FaqSideEffect> {
  static const tag = "[SupportBloc]";

  final ObtainFaqUseCase obtainFaqUseCase;

  FaqBloc({
    required this.obtainFaqUseCase,
  }) : super(FaqState.initial()) {
    on<FaqInit>(init);
    on<FaqNextPageGetContent>(nextPage);
    on<FaqNextPageLoading>(
      nextPageLoading,
      transformer: debounce(const Duration(milliseconds: 200)),
    );
  }

  FutureOr<void> init(FaqInit event, Emitter<FaqState> emit) async {
    await obtainFaqUseCase(0).then(
      (value) => value.fold(
        (l) => produceSideEffect(FaqError(l)),
        (r) {
          emit(
            state.copyWith(
              items: r.faqs,
              isLoading: false,
            ),
          );
        },
      ),
    );
  }

  FutureOr<void> nextPage(FaqNextPageGetContent event, Emitter<FaqState> emit) async {
    final nextPage = state.page + 1;
    await obtainFaqUseCase(nextPage).then(
      (value) => value.fold(
        (l) => produceSideEffect(FaqError(l)),
        (r) {
          final filteredItems = state.items.where((item) => item is! FaqContentNextPageLoading).toList();
          emit(
            state.copyWith(
              items: List.of(filteredItems)..addAll(r.faqs),
              page: () {
                // 다음 페이지가 비어 있으면 현재 페이지 넘버를 유지.
                if (r.faqs.isEmpty) {
                  return state.page;
                } else {
                  return nextPage;
                }
              }(),
              isLoading: false,
              isNextPageLoading: false,
            ),
          );
        },
      ),
    );
  }

  FutureOr<void> nextPageLoading(FaqNextPageLoading event, Emitter<FaqState> emit) {
    // 여러번의 페이지로딩이 그순간의 state를 참조하기 때문.
    if (!state.isNextPageLoading) {
      FortuneLogger.info(tag: "PagingTest", "#1 nextPageLoading");
      emit(
        state.copyWith(
          items: [...state.items, FaqContentNextPageLoading()],
          isNextPageLoading: true,
        ),
      );
      // add(FaqNextPageGetContent());
    }
  }
}



   final List<dynamic> response = await _client
          .from(_ingredientTableName)
          .select("*")
          .or(
            'type.eq.ticket,'
            'is_global.eq.$isGlobal',
          )
          .toSelect();